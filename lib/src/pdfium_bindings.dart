// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to PDFium
class PDFiumBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PDFiumBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PDFiumBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void FPDF_InitLibrary() {
    return _FPDF_InitLibrary();
  }

  late final _FPDF_InitLibrary_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_InitLibrary>>('FPDF_InitLibrary');
  late final _dart_FPDF_InitLibrary _FPDF_InitLibrary =
      _FPDF_InitLibrary_ptr.asFunction<_dart_FPDF_InitLibrary>();

  void FPDF_InitLibraryWithConfig(
    ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
  ) {
    return _FPDF_InitLibraryWithConfig(
      config,
    );
  }

  late final _FPDF_InitLibraryWithConfig_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_InitLibraryWithConfig>>(
          'FPDF_InitLibraryWithConfig');
  late final _dart_FPDF_InitLibraryWithConfig _FPDF_InitLibraryWithConfig =
      _FPDF_InitLibraryWithConfig_ptr.asFunction<
          _dart_FPDF_InitLibraryWithConfig>();

  void FPDF_DestroyLibrary() {
    return _FPDF_DestroyLibrary();
  }

  late final _FPDF_DestroyLibrary_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_DestroyLibrary>>(
          'FPDF_DestroyLibrary');
  late final _dart_FPDF_DestroyLibrary _FPDF_DestroyLibrary =
      _FPDF_DestroyLibrary_ptr.asFunction<_dart_FPDF_DestroyLibrary>();

  void FPDF_SetSandBoxPolicy(
    int policy,
    int enable,
  ) {
    return _FPDF_SetSandBoxPolicy(
      policy,
      enable,
    );
  }

  late final _FPDF_SetSandBoxPolicy_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_SetSandBoxPolicy>>(
          'FPDF_SetSandBoxPolicy');
  late final _dart_FPDF_SetSandBoxPolicy _FPDF_SetSandBoxPolicy =
      _FPDF_SetSandBoxPolicy_ptr.asFunction<_dart_FPDF_SetSandBoxPolicy>();

  int FPDF_SetPrintMode(
    int mode,
  ) {
    return _FPDF_SetPrintMode(
      mode,
    );
  }

  late final _FPDF_SetPrintMode_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_SetPrintMode>>('FPDF_SetPrintMode');
  late final _dart_FPDF_SetPrintMode _FPDF_SetPrintMode =
      _FPDF_SetPrintMode_ptr.asFunction<_dart_FPDF_SetPrintMode>();

  ffi.Pointer<fpdf_document_t__> FPDF_LoadDocument(
    ffi.Pointer<ffi.Int8> file_path,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _FPDF_LoadDocument(
      file_path,
      password,
    );
  }

  late final _FPDF_LoadDocument_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_LoadDocument>>('FPDF_LoadDocument');
  late final _dart_FPDF_LoadDocument _FPDF_LoadDocument =
      _FPDF_LoadDocument_ptr.asFunction<_dart_FPDF_LoadDocument>();

  ffi.Pointer<fpdf_document_t__> FPDF_LoadMemDocument(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _FPDF_LoadMemDocument(
      data_buf,
      size,
      password,
    );
  }

  late final _FPDF_LoadMemDocument_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_LoadMemDocument>>(
          'FPDF_LoadMemDocument');
  late final _dart_FPDF_LoadMemDocument _FPDF_LoadMemDocument =
      _FPDF_LoadMemDocument_ptr.asFunction<_dart_FPDF_LoadMemDocument>();

  ffi.Pointer<fpdf_document_t__> FPDF_LoadMemDocument64(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _FPDF_LoadMemDocument64(
      data_buf,
      size,
      password,
    );
  }

  late final _FPDF_LoadMemDocument64_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_LoadMemDocument64>>(
          'FPDF_LoadMemDocument64');
  late final _dart_FPDF_LoadMemDocument64 _FPDF_LoadMemDocument64 =
      _FPDF_LoadMemDocument64_ptr.asFunction<_dart_FPDF_LoadMemDocument64>();

  ffi.Pointer<fpdf_document_t__> FPDF_LoadCustomDocument(
    ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
    ffi.Pointer<ffi.Int8> password,
  ) {
    return _FPDF_LoadCustomDocument(
      pFileAccess,
      password,
    );
  }

  late final _FPDF_LoadCustomDocument_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_LoadCustomDocument>>(
          'FPDF_LoadCustomDocument');
  late final _dart_FPDF_LoadCustomDocument _FPDF_LoadCustomDocument =
      _FPDF_LoadCustomDocument_ptr.asFunction<_dart_FPDF_LoadCustomDocument>();

  int FPDF_GetFileVersion(
    ffi.Pointer<fpdf_document_t__> doc,
    ffi.Pointer<ffi.Int32> fileVersion,
  ) {
    return _FPDF_GetFileVersion(
      doc,
      fileVersion,
    );
  }

  late final _FPDF_GetFileVersion_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetFileVersion>>(
          'FPDF_GetFileVersion');
  late final _dart_FPDF_GetFileVersion _FPDF_GetFileVersion =
      _FPDF_GetFileVersion_ptr.asFunction<_dart_FPDF_GetFileVersion>();

  int FPDF_GetLastError() {
    return _FPDF_GetLastError();
  }

  late final _FPDF_GetLastError_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetLastError>>('FPDF_GetLastError');
  late final _dart_FPDF_GetLastError _FPDF_GetLastError =
      _FPDF_GetLastError_ptr.asFunction<_dart_FPDF_GetLastError>();

  int FPDF_DocumentHasValidCrossReferenceTable(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_DocumentHasValidCrossReferenceTable(
      document,
    );
  }

  late final _FPDF_DocumentHasValidCrossReferenceTable_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_DocumentHasValidCrossReferenceTable>>(
          'FPDF_DocumentHasValidCrossReferenceTable');
  late final _dart_FPDF_DocumentHasValidCrossReferenceTable
      _FPDF_DocumentHasValidCrossReferenceTable =
      _FPDF_DocumentHasValidCrossReferenceTable_ptr.asFunction<
          _dart_FPDF_DocumentHasValidCrossReferenceTable>();

  int FPDF_GetTrailerEnds(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Uint32> buffer,
    int length,
  ) {
    return _FPDF_GetTrailerEnds(
      document,
      buffer,
      length,
    );
  }

  late final _FPDF_GetTrailerEnds_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetTrailerEnds>>(
          'FPDF_GetTrailerEnds');
  late final _dart_FPDF_GetTrailerEnds _FPDF_GetTrailerEnds =
      _FPDF_GetTrailerEnds_ptr.asFunction<_dart_FPDF_GetTrailerEnds>();

  int FPDF_GetDocPermissions(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_GetDocPermissions(
      document,
    );
  }

  late final _FPDF_GetDocPermissions_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetDocPermissions>>(
          'FPDF_GetDocPermissions');
  late final _dart_FPDF_GetDocPermissions _FPDF_GetDocPermissions =
      _FPDF_GetDocPermissions_ptr.asFunction<_dart_FPDF_GetDocPermissions>();

  int FPDF_GetSecurityHandlerRevision(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_GetSecurityHandlerRevision(
      document,
    );
  }

  late final _FPDF_GetSecurityHandlerRevision_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetSecurityHandlerRevision>>(
          'FPDF_GetSecurityHandlerRevision');
  late final _dart_FPDF_GetSecurityHandlerRevision
      _FPDF_GetSecurityHandlerRevision = _FPDF_GetSecurityHandlerRevision_ptr
          .asFunction<_dart_FPDF_GetSecurityHandlerRevision>();

  int FPDF_GetPageCount(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_GetPageCount(
      document,
    );
  }

  late final _FPDF_GetPageCount_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageCount>>('FPDF_GetPageCount');
  late final _dart_FPDF_GetPageCount _FPDF_GetPageCount =
      _FPDF_GetPageCount_ptr.asFunction<_dart_FPDF_GetPageCount>();

  ffi.Pointer<fpdf_page_t__> FPDF_LoadPage(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
  ) {
    return _FPDF_LoadPage(
      document,
      page_index,
    );
  }

  late final _FPDF_LoadPage_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_LoadPage>>('FPDF_LoadPage');
  late final _dart_FPDF_LoadPage _FPDF_LoadPage =
      _FPDF_LoadPage_ptr.asFunction<_dart_FPDF_LoadPage>();

  double FPDF_GetPageWidthF(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    return _FPDF_GetPageWidthF(
      page,
    );
  }

  late final _FPDF_GetPageWidthF_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageWidthF>>('FPDF_GetPageWidthF');
  late final _dart_FPDF_GetPageWidthF _FPDF_GetPageWidthF =
      _FPDF_GetPageWidthF_ptr.asFunction<_dart_FPDF_GetPageWidthF>();

  double FPDF_GetPageWidth(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    return _FPDF_GetPageWidth(
      page,
    );
  }

  late final _FPDF_GetPageWidth_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageWidth>>('FPDF_GetPageWidth');
  late final _dart_FPDF_GetPageWidth _FPDF_GetPageWidth =
      _FPDF_GetPageWidth_ptr.asFunction<_dart_FPDF_GetPageWidth>();

  double FPDF_GetPageHeightF(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    return _FPDF_GetPageHeightF(
      page,
    );
  }

  late final _FPDF_GetPageHeightF_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageHeightF>>(
          'FPDF_GetPageHeightF');
  late final _dart_FPDF_GetPageHeightF _FPDF_GetPageHeightF =
      _FPDF_GetPageHeightF_ptr.asFunction<_dart_FPDF_GetPageHeightF>();

  double FPDF_GetPageHeight(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    return _FPDF_GetPageHeight(
      page,
    );
  }

  late final _FPDF_GetPageHeight_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageHeight>>('FPDF_GetPageHeight');
  late final _dart_FPDF_GetPageHeight _FPDF_GetPageHeight =
      _FPDF_GetPageHeight_ptr.asFunction<_dart_FPDF_GetPageHeight>();

  int FPDF_GetPageBoundingBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    return _FPDF_GetPageBoundingBox(
      page,
      rect,
    );
  }

  late final _FPDF_GetPageBoundingBox_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageBoundingBox>>(
          'FPDF_GetPageBoundingBox');
  late final _dart_FPDF_GetPageBoundingBox _FPDF_GetPageBoundingBox =
      _FPDF_GetPageBoundingBox_ptr.asFunction<_dart_FPDF_GetPageBoundingBox>();

  int FPDF_GetPageSizeByIndexF(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    ffi.Pointer<FS_SIZEF> size,
  ) {
    return _FPDF_GetPageSizeByIndexF(
      document,
      page_index,
      size,
    );
  }

  late final _FPDF_GetPageSizeByIndexF_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageSizeByIndexF>>(
          'FPDF_GetPageSizeByIndexF');
  late final _dart_FPDF_GetPageSizeByIndexF _FPDF_GetPageSizeByIndexF =
      _FPDF_GetPageSizeByIndexF_ptr.asFunction<
          _dart_FPDF_GetPageSizeByIndexF>();

  int FPDF_GetPageSizeByIndex(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    ffi.Pointer<ffi.Double> width,
    ffi.Pointer<ffi.Double> height,
  ) {
    return _FPDF_GetPageSizeByIndex(
      document,
      page_index,
      width,
      height,
    );
  }

  late final _FPDF_GetPageSizeByIndex_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetPageSizeByIndex>>(
          'FPDF_GetPageSizeByIndex');
  late final _dart_FPDF_GetPageSizeByIndex _FPDF_GetPageSizeByIndex =
      _FPDF_GetPageSizeByIndex_ptr.asFunction<_dart_FPDF_GetPageSizeByIndex>();

  void FPDF_RenderPage(
    ffi.Pointer<HDC> dc,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
  ) {
    return _FPDF_RenderPage(
      dc,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
    );
  }

  late final _FPDF_RenderPage_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_RenderPage>>('FPDF_RenderPage');
  late final _dart_FPDF_RenderPage _FPDF_RenderPage =
      _FPDF_RenderPage_ptr.asFunction<_dart_FPDF_RenderPage>();

  void FPDF_RenderPageBitmap(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
  ) {
    return _FPDF_RenderPageBitmap(
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
    );
  }

  late final _FPDF_RenderPageBitmap_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_RenderPageBitmap>>(
          'FPDF_RenderPageBitmap');
  late final _dart_FPDF_RenderPageBitmap _FPDF_RenderPageBitmap =
      _FPDF_RenderPageBitmap_ptr.asFunction<_dart_FPDF_RenderPageBitmap>();

  void FPDF_RenderPageBitmapWithMatrix(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_MATRIX> matrix,
    ffi.Pointer<FS_RECTF> clipping,
    int flags,
  ) {
    return _FPDF_RenderPageBitmapWithMatrix(
      bitmap,
      page,
      matrix,
      clipping,
      flags,
    );
  }

  late final _FPDF_RenderPageBitmapWithMatrix_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_RenderPageBitmapWithMatrix>>(
          'FPDF_RenderPageBitmapWithMatrix');
  late final _dart_FPDF_RenderPageBitmapWithMatrix
      _FPDF_RenderPageBitmapWithMatrix = _FPDF_RenderPageBitmapWithMatrix_ptr
          .asFunction<_dart_FPDF_RenderPageBitmapWithMatrix>();

  void FPDF_ClosePage(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    return _FPDF_ClosePage(
      page,
    );
  }

  late final _FPDF_ClosePage_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_ClosePage>>('FPDF_ClosePage');
  late final _dart_FPDF_ClosePage _FPDF_ClosePage =
      _FPDF_ClosePage_ptr.asFunction<_dart_FPDF_ClosePage>();

  void FPDF_CloseDocument(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_CloseDocument(
      document,
    );
  }

  late final _FPDF_CloseDocument_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_CloseDocument>>('FPDF_CloseDocument');
  late final _dart_FPDF_CloseDocument _FPDF_CloseDocument =
      _FPDF_CloseDocument_ptr.asFunction<_dart_FPDF_CloseDocument>();

  int FPDF_DeviceToPage(
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int device_x,
    int device_y,
    ffi.Pointer<ffi.Double> page_x,
    ffi.Pointer<ffi.Double> page_y,
  ) {
    return _FPDF_DeviceToPage(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      device_x,
      device_y,
      page_x,
      page_y,
    );
  }

  late final _FPDF_DeviceToPage_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_DeviceToPage>>('FPDF_DeviceToPage');
  late final _dart_FPDF_DeviceToPage _FPDF_DeviceToPage =
      _FPDF_DeviceToPage_ptr.asFunction<_dart_FPDF_DeviceToPage>();

  int FPDF_PageToDevice(
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    double page_x,
    double page_y,
    ffi.Pointer<ffi.Int32> device_x,
    ffi.Pointer<ffi.Int32> device_y,
  ) {
    return _FPDF_PageToDevice(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      page_x,
      page_y,
      device_x,
      device_y,
    );
  }

  late final _FPDF_PageToDevice_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_PageToDevice>>('FPDF_PageToDevice');
  late final _dart_FPDF_PageToDevice _FPDF_PageToDevice =
      _FPDF_PageToDevice_ptr.asFunction<_dart_FPDF_PageToDevice>();

  ffi.Pointer<fpdf_bitmap_t__> FPDFBitmap_Create(
    int width,
    int height,
    int alpha,
  ) {
    return _FPDFBitmap_Create(
      width,
      height,
      alpha,
    );
  }

  late final _FPDFBitmap_Create_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_Create>>('FPDFBitmap_Create');
  late final _dart_FPDFBitmap_Create _FPDFBitmap_Create =
      _FPDFBitmap_Create_ptr.asFunction<_dart_FPDFBitmap_Create>();

  ffi.Pointer<fpdf_bitmap_t__> FPDFBitmap_CreateEx(
    int width,
    int height,
    int format,
    ffi.Pointer<ffi.Void> first_scan,
    int stride,
  ) {
    return _FPDFBitmap_CreateEx(
      width,
      height,
      format,
      first_scan,
      stride,
    );
  }

  late final _FPDFBitmap_CreateEx_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_CreateEx>>(
          'FPDFBitmap_CreateEx');
  late final _dart_FPDFBitmap_CreateEx _FPDFBitmap_CreateEx =
      _FPDFBitmap_CreateEx_ptr.asFunction<_dart_FPDFBitmap_CreateEx>();

  int FPDFBitmap_GetFormat(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_GetFormat(
      bitmap,
    );
  }

  late final _FPDFBitmap_GetFormat_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_GetFormat>>(
          'FPDFBitmap_GetFormat');
  late final _dart_FPDFBitmap_GetFormat _FPDFBitmap_GetFormat =
      _FPDFBitmap_GetFormat_ptr.asFunction<_dart_FPDFBitmap_GetFormat>();

  void FPDFBitmap_FillRect(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    int left,
    int top,
    int width,
    int height,
    int color,
  ) {
    return _FPDFBitmap_FillRect(
      bitmap,
      left,
      top,
      width,
      height,
      color,
    );
  }

  late final _FPDFBitmap_FillRect_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_FillRect>>(
          'FPDFBitmap_FillRect');
  late final _dart_FPDFBitmap_FillRect _FPDFBitmap_FillRect =
      _FPDFBitmap_FillRect_ptr.asFunction<_dart_FPDFBitmap_FillRect>();

  ffi.Pointer<ffi.Uint8> FPDFBitmap_GetBuffer(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_GetBuffer(
      bitmap,
    );
  }

  late final _FPDFBitmap_GetBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_GetBuffer>>(
          'FPDFBitmap_GetBuffer');
  late final _dart_FPDFBitmap_GetBuffer _FPDFBitmap_GetBuffer =
      _FPDFBitmap_GetBuffer_ptr.asFunction<_dart_FPDFBitmap_GetBuffer>();

  int FPDFBitmap_GetWidth(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_GetWidth(
      bitmap,
    );
  }

  late final _FPDFBitmap_GetWidth_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_GetWidth>>(
          'FPDFBitmap_GetWidth');
  late final _dart_FPDFBitmap_GetWidth _FPDFBitmap_GetWidth =
      _FPDFBitmap_GetWidth_ptr.asFunction<_dart_FPDFBitmap_GetWidth>();

  int FPDFBitmap_GetHeight(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_GetHeight(
      bitmap,
    );
  }

  late final _FPDFBitmap_GetHeight_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_GetHeight>>(
          'FPDFBitmap_GetHeight');
  late final _dart_FPDFBitmap_GetHeight _FPDFBitmap_GetHeight =
      _FPDFBitmap_GetHeight_ptr.asFunction<_dart_FPDFBitmap_GetHeight>();

  int FPDFBitmap_GetStride(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_GetStride(
      bitmap,
    );
  }

  late final _FPDFBitmap_GetStride_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_GetStride>>(
          'FPDFBitmap_GetStride');
  late final _dart_FPDFBitmap_GetStride _FPDFBitmap_GetStride =
      _FPDFBitmap_GetStride_ptr.asFunction<_dart_FPDFBitmap_GetStride>();

  void FPDFBitmap_Destroy(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    return _FPDFBitmap_Destroy(
      bitmap,
    );
  }

  late final _FPDFBitmap_Destroy_ptr =
      _lookup<ffi.NativeFunction<_c_FPDFBitmap_Destroy>>('FPDFBitmap_Destroy');
  late final _dart_FPDFBitmap_Destroy _FPDFBitmap_Destroy =
      _FPDFBitmap_Destroy_ptr.asFunction<_dart_FPDFBitmap_Destroy>();

  int FPDF_VIEWERREF_GetPrintScaling(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_VIEWERREF_GetPrintScaling(
      document,
    );
  }

  late final _FPDF_VIEWERREF_GetPrintScaling_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetPrintScaling>>(
          'FPDF_VIEWERREF_GetPrintScaling');
  late final _dart_FPDF_VIEWERREF_GetPrintScaling
      _FPDF_VIEWERREF_GetPrintScaling = _FPDF_VIEWERREF_GetPrintScaling_ptr
          .asFunction<_dart_FPDF_VIEWERREF_GetPrintScaling>();

  int FPDF_VIEWERREF_GetNumCopies(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_VIEWERREF_GetNumCopies(
      document,
    );
  }

  late final _FPDF_VIEWERREF_GetNumCopies_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetNumCopies>>(
          'FPDF_VIEWERREF_GetNumCopies');
  late final _dart_FPDF_VIEWERREF_GetNumCopies _FPDF_VIEWERREF_GetNumCopies =
      _FPDF_VIEWERREF_GetNumCopies_ptr.asFunction<
          _dart_FPDF_VIEWERREF_GetNumCopies>();

  ffi.Pointer<fpdf_pagerange_t__> FPDF_VIEWERREF_GetPrintPageRange(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_VIEWERREF_GetPrintPageRange(
      document,
    );
  }

  late final _FPDF_VIEWERREF_GetPrintPageRange_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetPrintPageRange>>(
          'FPDF_VIEWERREF_GetPrintPageRange');
  late final _dart_FPDF_VIEWERREF_GetPrintPageRange
      _FPDF_VIEWERREF_GetPrintPageRange = _FPDF_VIEWERREF_GetPrintPageRange_ptr
          .asFunction<_dart_FPDF_VIEWERREF_GetPrintPageRange>();

  int FPDF_VIEWERREF_GetPrintPageRangeCount(
    ffi.Pointer<fpdf_pagerange_t__> pagerange,
  ) {
    return _FPDF_VIEWERREF_GetPrintPageRangeCount(
      pagerange,
    );
  }

  late final _FPDF_VIEWERREF_GetPrintPageRangeCount_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetPrintPageRangeCount>>(
          'FPDF_VIEWERREF_GetPrintPageRangeCount');
  late final _dart_FPDF_VIEWERREF_GetPrintPageRangeCount
      _FPDF_VIEWERREF_GetPrintPageRangeCount =
      _FPDF_VIEWERREF_GetPrintPageRangeCount_ptr.asFunction<
          _dart_FPDF_VIEWERREF_GetPrintPageRangeCount>();

  int FPDF_VIEWERREF_GetPrintPageRangeElement(
    ffi.Pointer<fpdf_pagerange_t__> pagerange,
    int index,
  ) {
    return _FPDF_VIEWERREF_GetPrintPageRangeElement(
      pagerange,
      index,
    );
  }

  late final _FPDF_VIEWERREF_GetPrintPageRangeElement_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetPrintPageRangeElement>>(
          'FPDF_VIEWERREF_GetPrintPageRangeElement');
  late final _dart_FPDF_VIEWERREF_GetPrintPageRangeElement
      _FPDF_VIEWERREF_GetPrintPageRangeElement =
      _FPDF_VIEWERREF_GetPrintPageRangeElement_ptr.asFunction<
          _dart_FPDF_VIEWERREF_GetPrintPageRangeElement>();

  int FPDF_VIEWERREF_GetDuplex(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_VIEWERREF_GetDuplex(
      document,
    );
  }

  late final _FPDF_VIEWERREF_GetDuplex_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetDuplex>>(
          'FPDF_VIEWERREF_GetDuplex');
  late final _dart_FPDF_VIEWERREF_GetDuplex _FPDF_VIEWERREF_GetDuplex =
      _FPDF_VIEWERREF_GetDuplex_ptr.asFunction<
          _dart_FPDF_VIEWERREF_GetDuplex>();

  int FPDF_VIEWERREF_GetName(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> buffer,
    int length,
  ) {
    return _FPDF_VIEWERREF_GetName(
      document,
      key,
      buffer,
      length,
    );
  }

  late final _FPDF_VIEWERREF_GetName_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_VIEWERREF_GetName>>(
          'FPDF_VIEWERREF_GetName');
  late final _dart_FPDF_VIEWERREF_GetName _FPDF_VIEWERREF_GetName =
      _FPDF_VIEWERREF_GetName_ptr.asFunction<_dart_FPDF_VIEWERREF_GetName>();

  int FPDF_CountNamedDests(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_CountNamedDests(
      document,
    );
  }

  late final _FPDF_CountNamedDests_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_CountNamedDests>>(
          'FPDF_CountNamedDests');
  late final _dart_FPDF_CountNamedDests _FPDF_CountNamedDests =
      _FPDF_CountNamedDests_ptr.asFunction<_dart_FPDF_CountNamedDests>();

  ffi.Pointer<fpdf_dest_t__> FPDF_GetNamedDestByName(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _FPDF_GetNamedDestByName(
      document,
      name,
    );
  }

  late final _FPDF_GetNamedDestByName_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetNamedDestByName>>(
          'FPDF_GetNamedDestByName');
  late final _dart_FPDF_GetNamedDestByName _FPDF_GetNamedDestByName =
      _FPDF_GetNamedDestByName_ptr.asFunction<_dart_FPDF_GetNamedDestByName>();

  ffi.Pointer<fpdf_dest_t__> FPDF_GetNamedDest(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Int64> buflen,
  ) {
    return _FPDF_GetNamedDest(
      document,
      index,
      buffer,
      buflen,
    );
  }

  late final _FPDF_GetNamedDest_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetNamedDest>>('FPDF_GetNamedDest');
  late final _dart_FPDF_GetNamedDest _FPDF_GetNamedDest =
      _FPDF_GetNamedDest_ptr.asFunction<_dart_FPDF_GetNamedDest>();

  int FPDF_GetXFAPacketCount(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    return _FPDF_GetXFAPacketCount(
      document,
    );
  }

  late final _FPDF_GetXFAPacketCount_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetXFAPacketCount>>(
          'FPDF_GetXFAPacketCount');
  late final _dart_FPDF_GetXFAPacketCount _FPDF_GetXFAPacketCount =
      _FPDF_GetXFAPacketCount_ptr.asFunction<_dart_FPDF_GetXFAPacketCount>();

  int FPDF_GetXFAPacketName(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    return _FPDF_GetXFAPacketName(
      document,
      index,
      buffer,
      buflen,
    );
  }

  late final _FPDF_GetXFAPacketName_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetXFAPacketName>>(
          'FPDF_GetXFAPacketName');
  late final _dart_FPDF_GetXFAPacketName _FPDF_GetXFAPacketName =
      _FPDF_GetXFAPacketName_ptr.asFunction<_dart_FPDF_GetXFAPacketName>();

  int FPDF_GetXFAPacketContent(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    return _FPDF_GetXFAPacketContent(
      document,
      index,
      buffer,
      buflen,
      out_buflen,
    );
  }

  late final _FPDF_GetXFAPacketContent_ptr =
      _lookup<ffi.NativeFunction<_c_FPDF_GetXFAPacketContent>>(
          'FPDF_GetXFAPacketContent');
  late final _dart_FPDF_GetXFAPacketContent _FPDF_GetXFAPacketContent =
      _FPDF_GetXFAPacketContent_ptr.asFunction<
          _dart_FPDF_GetXFAPacketContent>();
}

abstract class FPDF_TEXT_RENDERMODE {
  static const int FPDF_TEXTRENDERMODE_UNKNOWN = -1;
  static const int FPDF_TEXTRENDERMODE_FILL = 0;
  static const int FPDF_TEXTRENDERMODE_STROKE = 1;
  static const int FPDF_TEXTRENDERMODE_FILL_STROKE = 2;
  static const int FPDF_TEXTRENDERMODE_INVISIBLE = 3;
  static const int FPDF_TEXTRENDERMODE_FILL_CLIP = 4;
  static const int FPDF_TEXTRENDERMODE_STROKE_CLIP = 5;
  static const int FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP = 6;
  static const int FPDF_TEXTRENDERMODE_CLIP = 7;
  static const int FPDF_TEXTRENDERMODE_LAST = 7;
}

class fpdf_action_t__ extends ffi.Opaque {}

class fpdf_annotation_t__ extends ffi.Opaque {}

class fpdf_attachment_t__ extends ffi.Opaque {}

class fpdf_avail_t__ extends ffi.Opaque {}

class fpdf_bitmap_t__ extends ffi.Opaque {}

class fpdf_bookmark_t__ extends ffi.Opaque {}

class fpdf_clippath_t__ extends ffi.Opaque {}

class fpdf_dest_t__ extends ffi.Opaque {}

class fpdf_document_t__ extends ffi.Opaque {}

class fpdf_font_t__ extends ffi.Opaque {}

class fpdf_form_handle_t__ extends ffi.Opaque {}

class fpdf_glyphpath_t__ extends ffi.Opaque {}

class fpdf_javascript_action_t extends ffi.Opaque {}

class fpdf_link_t__ extends ffi.Opaque {}

class fpdf_page_t__ extends ffi.Opaque {}

class fpdf_pagelink_t__ extends ffi.Opaque {}

class fpdf_pageobject_t__ extends ffi.Opaque {}

class fpdf_pageobjectmark_t__ extends ffi.Opaque {}

class fpdf_pagerange_t__ extends ffi.Opaque {}

class fpdf_pathsegment_t extends ffi.Opaque {}

class fpdf_schhandle_t__ extends ffi.Opaque {}

class fpdf_signature_t__ extends ffi.Opaque {}

class fpdf_structelement_t__ extends ffi.Opaque {}

class fpdf_structelement_attr_t__ extends ffi.Opaque {}

class fpdf_structtree_t__ extends ffi.Opaque {}

class fpdf_textpage_t__ extends ffi.Opaque {}

class fpdf_widget_t__ extends ffi.Opaque {}

class fpdf_xobject_t__ extends ffi.Opaque {}

abstract class FPDF_DUPLEXTYPE {
  static const int DuplexUndefined = 0;
  static const int Simplex = 1;
  static const int DuplexFlipShortEdge = 2;
  static const int DuplexFlipLongEdge = 3;
}

class FPDF_BSTR extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> str;

  @ffi.Int32()
  external int len;
}

class FS_MATRIX extends ffi.Struct {
  @ffi.Float()
  external double a;

  @ffi.Float()
  external double b;

  @ffi.Float()
  external double c;

  @ffi.Float()
  external double d;

  @ffi.Float()
  external double e;

  @ffi.Float()
  external double f;
}

class FS_RECTF extends ffi.Struct {
  @ffi.Float()
  external double left;

  @ffi.Float()
  external double top;

  @ffi.Float()
  external double right;

  @ffi.Float()
  external double bottom;
}

class FS_SIZEF extends ffi.Struct {
  @ffi.Float()
  external double width;

  @ffi.Float()
  external double height;
}

class FS_POINTF extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

class FPDF_LIBRARY_CONFIG extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> m_pUserFontPaths;

  external ffi.Pointer<ffi.Void> m_pIsolate;

  @ffi.Uint32()
  external int m_v8EmbedderSlot;

  external ffi.Pointer<ffi.Void> m_pPlatform;
}

class FPDF_FILEACCESS extends ffi.Struct {
  @ffi.Uint64()
  external int m_FileLen;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> m_GetBlock;

  external ffi.Pointer<ffi.Void> m_Param;
}

class FPDF_FILEHANDLER extends ffi.Struct {
  external ffi.Pointer<ffi.Void> clientData;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> Release;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> GetSize;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> ReadBlock;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> WriteBlock;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> Flush;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Truncate;
}

class FPDF_COLORSCHEME extends ffi.Struct {
  @ffi.Uint64()
  external int path_fill_color;

  @ffi.Uint64()
  external int path_stroke_color;

  @ffi.Uint64()
  external int text_fill_color;

  @ffi.Uint64()
  external int text_stroke_color;
}

class HDC extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

const int FPDF_OBJECT_UNKNOWN = 0;

const int FPDF_OBJECT_BOOLEAN = 1;

const int FPDF_OBJECT_NUMBER = 2;

const int FPDF_OBJECT_STRING = 3;

const int FPDF_OBJECT_NAME = 4;

const int FPDF_OBJECT_ARRAY = 5;

const int FPDF_OBJECT_DICTIONARY = 6;

const int FPDF_OBJECT_STREAM = 7;

const int FPDF_OBJECT_NULLOBJ = 8;

const int FPDF_OBJECT_REFERENCE = 9;

const int FPDF_POLICY_MACHINETIME_ACCESS = 0;

const int FPDF_ERR_SUCCESS = 0;

const int FPDF_ERR_UNKNOWN = 1;

const int FPDF_ERR_FILE = 2;

const int FPDF_ERR_FORMAT = 3;

const int FPDF_ERR_PASSWORD = 4;

const int FPDF_ERR_SECURITY = 5;

const int FPDF_ERR_PAGE = 6;

const int FPDF_ANNOT = 1;

const int FPDF_LCD_TEXT = 2;

const int FPDF_NO_NATIVETEXT = 4;

const int FPDF_GRAYSCALE = 8;

const int FPDF_DEBUG_INFO = 128;

const int FPDF_NO_CATCH = 256;

const int FPDF_RENDER_LIMITEDIMAGECACHE = 512;

const int FPDF_RENDER_FORCEHALFTONE = 1024;

const int FPDF_PRINTING = 2048;

const int FPDF_RENDER_NO_SMOOTHTEXT = 4096;

const int FPDF_RENDER_NO_SMOOTHIMAGE = 8192;

const int FPDF_RENDER_NO_SMOOTHPATH = 16384;

const int FPDF_REVERSE_BYTE_ORDER = 16;

const int FPDF_CONVERT_FILL_TO_STROKE = 32;

const int FPDFBitmap_Unknown = 0;

const int FPDFBitmap_Gray = 1;

const int FPDFBitmap_BGR = 2;

const int FPDFBitmap_BGRx = 3;

const int FPDFBitmap_BGRA = 4;

typedef _c_FPDF_InitLibrary = ffi.Void Function();

typedef _dart_FPDF_InitLibrary = void Function();

typedef _c_FPDF_InitLibraryWithConfig = ffi.Void Function(
  ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
);

typedef _dart_FPDF_InitLibraryWithConfig = void Function(
  ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
);

typedef _c_FPDF_DestroyLibrary = ffi.Void Function();

typedef _dart_FPDF_DestroyLibrary = void Function();

typedef _c_FPDF_SetSandBoxPolicy = ffi.Void Function(
  ffi.Uint64 policy,
  ffi.Int32 enable,
);

typedef _dart_FPDF_SetSandBoxPolicy = void Function(
  int policy,
  int enable,
);

typedef _c_FPDF_SetPrintMode = ffi.Int32 Function(
  ffi.Int32 mode,
);

typedef _dart_FPDF_SetPrintMode = int Function(
  int mode,
);

typedef _c_FPDF_LoadDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Int8> file_path,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Int8> file_path,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadMemDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  ffi.Int32 size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadMemDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  int size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadMemDocument64 = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadMemDocument64 = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  int size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadCustomDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadCustomDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_GetFileVersion = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> doc,
  ffi.Pointer<ffi.Int32> fileVersion,
);

typedef _dart_FPDF_GetFileVersion = int Function(
  ffi.Pointer<fpdf_document_t__> doc,
  ffi.Pointer<ffi.Int32> fileVersion,
);

typedef _c_FPDF_GetLastError = ffi.Uint64 Function();

typedef _dart_FPDF_GetLastError = int Function();

typedef _c_FPDF_DocumentHasValidCrossReferenceTable = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_DocumentHasValidCrossReferenceTable = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetTrailerEnds = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint32> buffer,
  ffi.Uint64 length,
);

typedef _dart_FPDF_GetTrailerEnds = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint32> buffer,
  int length,
);

typedef _c_FPDF_GetDocPermissions = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetDocPermissions = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetSecurityHandlerRevision = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetSecurityHandlerRevision = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetPageCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetPageCount = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_LoadPage = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
);

typedef _dart_FPDF_LoadPage = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
);

typedef _c_FPDF_GetPageWidthF = ffi.Float Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageWidthF = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageWidth = ffi.Double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageWidth = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageHeightF = ffi.Float Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageHeightF = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageHeight = ffi.Double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageHeight = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageBoundingBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDF_GetPageBoundingBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDF_GetPageSizeByIndexF = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Pointer<FS_SIZEF> size,
);

typedef _dart_FPDF_GetPageSizeByIndexF = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  ffi.Pointer<FS_SIZEF> size,
);

typedef _c_FPDF_GetPageSizeByIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Pointer<ffi.Double> width,
  ffi.Pointer<ffi.Double> height,
);

typedef _dart_FPDF_GetPageSizeByIndex = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  ffi.Pointer<ffi.Double> width,
  ffi.Pointer<ffi.Double> height,
);

typedef _c_FPDF_RenderPage = ffi.Void Function(
  ffi.Pointer<HDC> dc,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
);

typedef _dart_FPDF_RenderPage = void Function(
  ffi.Pointer<HDC> dc,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
);

typedef _c_FPDF_RenderPageBitmap = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
);

typedef _dart_FPDF_RenderPageBitmap = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
);

typedef _c_FPDF_RenderPageBitmapWithMatrix = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipping,
  ffi.Int32 flags,
);

typedef _dart_FPDF_RenderPageBitmapWithMatrix = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipping,
  int flags,
);

typedef _c_FPDF_ClosePage = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_ClosePage = void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_CloseDocument = ffi.Void Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_CloseDocument = void Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_DeviceToPage = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 device_x,
  ffi.Int32 device_y,
  ffi.Pointer<ffi.Double> page_x,
  ffi.Pointer<ffi.Double> page_y,
);

typedef _dart_FPDF_DeviceToPage = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int device_x,
  int device_y,
  ffi.Pointer<ffi.Double> page_x,
  ffi.Pointer<ffi.Double> page_y,
);

typedef _c_FPDF_PageToDevice = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Double page_x,
  ffi.Double page_y,
  ffi.Pointer<ffi.Int32> device_x,
  ffi.Pointer<ffi.Int32> device_y,
);

typedef _dart_FPDF_PageToDevice = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  double page_x,
  double page_y,
  ffi.Pointer<ffi.Int32> device_x,
  ffi.Pointer<ffi.Int32> device_y,
);

typedef _c_FPDFBitmap_Create = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 alpha,
);

typedef _dart_FPDFBitmap_Create = ffi.Pointer<fpdf_bitmap_t__> Function(
  int width,
  int height,
  int alpha,
);

typedef _c_FPDFBitmap_CreateEx = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 format,
  ffi.Pointer<ffi.Void> first_scan,
  ffi.Int32 stride,
);

typedef _dart_FPDFBitmap_CreateEx = ffi.Pointer<fpdf_bitmap_t__> Function(
  int width,
  int height,
  int format,
  ffi.Pointer<ffi.Void> first_scan,
  int stride,
);

typedef _c_FPDFBitmap_GetFormat = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetFormat = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_FillRect = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint64 color,
);

typedef _dart_FPDFBitmap_FillRect = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  int left,
  int top,
  int width,
  int height,
  int color,
);

typedef _c_FPDFBitmap_GetBuffer = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetBuffer = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetWidth = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetWidth = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetHeight = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetHeight = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetStride = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetStride = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_Destroy = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_Destroy = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDF_VIEWERREF_GetPrintScaling = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetPrintScaling = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetNumCopies = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetNumCopies = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRange = ffi.Pointer<fpdf_pagerange_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRange = ffi.Pointer<fpdf_pagerange_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRangeCount = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRangeCount = int Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRangeElement = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
  ffi.Uint64 index,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRangeElement = int Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
  int index,
);

typedef _c_FPDF_VIEWERREF_GetDuplex = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetDuplex = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 length,
);

typedef _dart_FPDF_VIEWERREF_GetName = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> buffer,
  int length,
);

typedef _c_FPDF_CountNamedDests = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_CountNamedDests = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetNamedDestByName = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FPDF_GetNamedDestByName = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_FPDF_GetNamedDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> buflen,
);

typedef _dart_FPDF_GetNamedDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> buflen,
);

typedef _c_FPDF_GetXFAPacketCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetXFAPacketCount = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetXFAPacketName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_GetXFAPacketName = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_GetXFAPacketContent = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDF_GetXFAPacketContent = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);
